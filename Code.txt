public static string TitleCase(string value)
        {
            string titleString = ""; // destination string, this will be returned by function
            if (!String.IsNullOrEmpty(value))
            {
                string[] lowerCases = new string[13] { "of", "the", "in", "a", "an", "to", "and", "at", "from", "by", "on", "or", "is" }; // list of lower case words that should only be capitalised at start and end of title
                string[] specialCases = new string[7] { "UK", "USA", "IRS", "UCLA", "PHd", "UB40a", "MSc" }; // list of words that need capitalisation preserved at any point in title
                string[] words = value.ToLower().Split(' ');
                bool wordAdded = false; // flag to confirm whether this word appears in special case list
                int counter = 1;
                foreach (string s in words)
                {

                    // check if word appears in lower case list
                    foreach (string lcWord in lowerCases)
                    {
                        if (s.ToLower() == lcWord)
                        {
                            // if lower case word is the first or last word of the title then it still needs capital so skip this bit.
                            if (counter == 0 || counter == words.Length) { break; };
                            titleString += lcWord;
                            wordAdded = true;
                            break;
                        }
                    }

                    // check if word appears in special case list
                    foreach (string scWord in specialCases)
                    {
                        if (s.ToUpper() == scWord.ToUpper())
                        {
                            titleString += scWord;
                            wordAdded = true;
                            break;
                        }
                    }

                    if (!wordAdded)
                    { // word does not appear in special cases or lower cases, so capitalise first letter and add to destination string
                        titleString += char.ToUpper(s[0]) + s.Substring(1).ToLower();
                    }
                    wordAdded = false;

                    if (counter < words.Length)
                    {
                        titleString += " "; //dont forget to add spaces back in again!
                    }
                    counter++;
                }
            }
            return titleString;
        }



public static string GenerateVerificationCode(string _Type, string _length = "4")
        {
            string alphabets = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string small_alphabets = "abcdefghijklmnopqrstuvwxyz";
            string numbers = "1234567890";

            string characters = numbers;

            if (_Type == "1")
            {
                characters += alphabets + small_alphabets + numbers;
            }
            //else if (_Type == "2")
            //{
            //    characters += alphabets  + numbers;
            //}

            int length = int.Parse(_length);
            string otp = string.Empty;
            for (int i = 0; i < length; i++)
            {
                string character = string.Empty;
                do
                {
                    int index = new Random().Next(0, characters.Length);
                    character = characters.ToCharArray()[index].ToString();
                } while (otp.IndexOf(character) != -1);
                otp += character;
            }

            return otp;
        }



 public static string GetTimeAgo(DateTime? dt)
        {
            try
            {
                if (dt.HasValue)
                {
                    TimeSpan span = DateTime.Now - Convert.ToDateTime(dt);
                    if (span.Days > 365)
                    {
                        int years = (span.Days / 365);
                        if (span.Days % 365 != 0)
                            years += 1;
                        return String.Format("{0} {1} ago",
                        years, years == 1 ? "year" : "years");
                    }
                    if (span.Days > 30)
                    {
                        int months = (span.Days / 30);
                        if (span.Days % 31 != 0)
                            months += 1;
                        return String.Format("{0} {1} ago",
                        months, months == 1 ? "month" : "months");
                    }
                    if (span.Days == 1)
                        return String.Format("{0}",
                                         "Yesterday");
                    else if (span.Days > 1)
                        return String.Format("{0} {1} ago",
                        span.Days, span.Days == 1 ? "day" : "days");
                    if (span.Hours > 0)
                        return String.Format("{0} {1} ago",
                        span.Hours, span.Hours == 1 ? "hour" : "hours");
                    if (span.Minutes > 0)
                        return String.Format("{0} {1} ago",
                        span.Minutes, span.Minutes == 1 ? "minute" : "minutes");
                    if (span.Seconds > 5)
                        return String.Format("{0} seconds ago", span.Seconds);
                    if (span.Seconds <= 5)
                        return "just now";
                    return string.Empty;
                }
                else
                {
                    return string.Empty;
                }
            }
            catch (Exception)
            {
                return string.Empty;
            }
        }


 public static string GetTimeAgo2(DateTime? dt)
        {
            try
            {
                if (dt.HasValue)
                {
                    DateTime _time = Convert.ToDateTime("2016-10-07 09:43:31.797");

                    TimeSpan span = _time - Convert.ToDateTime(dt);
                    if (span.Days > 365)
                    {
                        return Convert.ToDateTime(dt).ToString("MM/dd/yyyy");
                    }
                    if (span.Days > 30)
                    {
                        return Convert.ToDateTime(dt).ToString("MM/dd/yyyy");
                    }
                    if (span.Days == 1)
                        return String.Format("{0}",
                                         "Yesterday");
                    else if (span.Days > 1)
                        return Convert.ToDateTime(dt).ToString("dddd");
                    if (span.Hours > 0)
                        return Convert.ToDateTime(dt).ToString("h:mm tt");
                    if (span.Minutes > 0)
                        return Convert.ToDateTime(dt).ToString("h:mm tt");
                    if (span.Seconds > 5)
                        return Convert.ToDateTime(dt).ToString("h:mm tt");
                    if (span.Seconds <= 5)
                        return Convert.ToDateTime(dt).ToString("h:mm tt");
                    return string.Empty;
                }
                else
                {
                    return string.Empty;
                }
            }
#pragma warning disable CS0168 // The variable 'ex' is declared but never used
            catch (Exception ex)
#pragma warning restore CS0168 // The variable 'ex' is declared but never used
            {
                return string.Empty;
            }
        }



